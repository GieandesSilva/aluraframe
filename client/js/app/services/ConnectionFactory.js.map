{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["dbName","version","stores","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEUA,kB,GAAS,Y;AACTC,mB,GAAU,C;AACVC,kB,GAAS,CAAC,aAAD,C;AAEXC,sB,GAAa,I;AAEbC,iB,GAAQ,I;;yCAECC,iB;AAAoB;;AAE7B,6CAAc;AAAA;;AAEV,0BAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN,CAFU,CAEqD;AAClE;;;;oDAEsB;AAAE;;AAErB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;;AAEnC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBb,MAAtB,EAA8BC,OAA9B,CAAlB,CAFmC,CAEuB;;AAE1DS,wCAAYI,eAAZ,GAA8B,aAAK;AAAE;;AAEjCT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC,EAF+B,CAEmB;AACrD,6BAHD;;AAKAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oCAAG,CAAChB,UAAJ,EAAe;;AAEXA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB,CAFW,CAEmB;AAC9Bd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAU;AACzB,8CAAM,IAAIE,KAAJ,CAAU,8CAAV,CAAN;AACH,qCAFD;AAGH;;AAEDE,wCAAQL,UAAR,EAXyB,CAWJ;AACxB,6BAZD;;AAcAO,wCAAYW,OAAZ,GAAsB,aAAK;AAAE;;AAEzBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BAJD;AAKH,yBA5BM,CAAP;AA6BH;;;kDAEoBtB,U,EAAY;;AAE7BD,+BAAOwB,OAAP,CAAe,iBAAS;AAAE;;AAEtB,gCAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EACI1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEJ1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAgB,IAAjB,EAApC;AAEH,yBAPD;AASH;;;sDAEuB;;AAEpB,4BAAG7B,UAAH,EAAc;AACVC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["\r\n\r\n    const dbName = 'aluraframe'; // Recebe o nome do banco a ser criado ou atualizado no Browser\r\n    const version = 4; // Recebe a versão do banco a ser passada para efeitos de sincronização com o Browser\r\n    const stores = ['negociacoes']; // Recebe o nome da Store a ser verificada para criação ou atualização\r\n    \r\n    let connection = null; // Valor inicial para a conexão.\r\n    \r\n    let close = null;\r\n\r\n    export class ConnectionFactory { // É a fábrica de conexões\r\n\r\n        constructor() {\r\n            \r\n            throw new Error(\"ConnectionFactory não pode ser Instânciada\"); // Notifica aos desenvolvedores que ConnectionFactory não pode ser instânciada e deve ser obtida através do getConnection\r\n        }\r\n        \r\n        static getConnection() { // Responsável por retornar uma Promise() com a conexão desejada\r\n\r\n            return new Promise((resolve, reject) =>{\r\n\r\n                let openRequest = window.indexedDB.open(dbName, version); // Faz a abertura da janela para verifição do banco para atualização ou criação e sua versão.\r\n\r\n                openRequest.onupgradeneeded = e => { // Responsável pelos processos nas stores\r\n\r\n                    ConnectionFactory._createStores(e.target.result); // Requere o método _createStores\r\n                };\r\n\r\n                openRequest.onsuccess = e => {\r\n\r\n                    if(!connection){\r\n\r\n                        connection = e.target.result; // Verifica se a conexão já existe e retorna para a variável conexão o resultado\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function(){\r\n                            throw new Error('Você não pode acessar diretamente a conexão!');\r\n                        }\r\n                    }\r\n\r\n                    resolve(connection); // Retorna o sucesso na Conexão\r\n                };\r\n\r\n                openRequest.onerror = e => { // Retorna o possível erro de conexão\r\n\r\n                    console.log(e.target.error);\r\n                    reject(e.target.error.name);\r\n                }\r\n            }); \r\n        }\r\n\r\n        static _createStores(connection) {\r\n\r\n            stores.forEach(store => { // varre as stores e verifica uma possível atualização, exclusão, ou criação.\r\n\r\n                if(connection.objectStoreNames.contains(store)) \r\n                    connection.deleteObjectStore(store);\r\n\r\n                connection.createObjectStore(store, {autoIncrement : true});\r\n\r\n            });\r\n\r\n        }\r\n\r\n        static closeConnection(){\r\n\r\n            if(connection){\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n    }"]}